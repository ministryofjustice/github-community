name: "♻️ Deploy to Production Namespace"

on:
  workflow_dispatch:
  push:
    branches: [main]
  # 👇 TODO: Remove before merging into main 🔥
  pull_request:
    branches: [main]

env:
  KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
  KUBE_NAMESPACE: ${{ secrets.PROD_KUBE_NAMESPACE }}
  KUBE_CERT: ${{ secrets.PROD_KUBE_CERT }}
  KUBE_TOKEN: ${{ secrets.PROD_KUBE_TOKEN }}

  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_URL }}
  ECR_REPOSITORY: ${{ vars.PROD_ECR_REPOSITORY }}
  FLASK_APP_SECRET: ${{ secrets.PROD_FLASK_APP_SECRET }}
  POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
  POSTGRES_HOST: ${{ secrets.PROD_POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.PROD_POSTGRES_PORT }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  CIRCLECI_COST_PER_CREDIT: ${{ secrets.CIRCLECI_COST_PER_CREDIT }}
  CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_ADMIN_CONNOR_PAT }}
  GITHUB_APP_CLIENT_ID: ${{ vars.GH_APP_CLIENT_ID }}
  GITHUB_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
  GITHUB_APP_INSTALLATION_ID: ${{ vars.GH_APP_INSTALLATION_ID }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.PROD_ECR_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-prod:
    needs: build-push
    runs-on: ubuntu-latest
    container: alpine/k8s:1.23.17
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to the cluster
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config get-contexts
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Deploy helm chart to dev
        run: |
          helm upgrade github-community \
            helm/github-community \
            --install \
            --force \
            --wait \
            --timeout 10m \
            --namespace ${KUBE_NAMESPACE} \
            --values=helm/github-community/values-prod.yaml \
            --set app.deployment.env.AUTH0_CLIENT_ID="${AUTH0_CLIENT_ID}" \
            --set app.deployment.env.AUTH0_CLIENT_SECRET="${AUTH0_CLIENT_SECRET}" \
            --set app.deployment.env.APP_SECRET_KEY="${FLASK_APP_SECRET}" \
            --set app.deployment.env.POSTGRES_USER="${POSTGRES_USER}" \
            --set app.deployment.env.POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --set app.deployment.env.POSTGRES_DB="${POSTGRES_DB}" \
            --set app.deployment.env.POSTGRES_HOST="${POSTGRES_HOST}" \
            --set app.deployment.env.POSTGRES_PORT="${POSTGRES_PORT}" \
            --set app.deployment.env.ADMIN_GITHUB_TOKEN="${ADMIN_GITHUB_TOKEN}" \
            --set app.deployment.env.CIRCLECI_COST_PER_CREDIT="${CIRCLECI_COST_PER_CREDIT}" \
            --set app.deployment.env.CIRCLECI_TOKEN="${CIRCLECI_TOKEN}" \
            --set app.deployment.env.GITHUB_APP_CLIENT_ID="${GITHUB_APP_CLIENT_ID}" \
            --set app.deployment.env.GITHUB_APP_PRIVATE_KEY="${GITHUB_APP_PRIVATE_KEY}" \
            --set app.deployment.env.GITHUB_APP_INSTALLATION_ID="${GITHUB_APP_INSTALLATION_ID}" \
            --set app.deployment.image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
            --set app.deployment.image.tag="${IMAGE_TAG}"
